We are given the two ciphertexts:
2d0710181b01111f0817171401071c11091a0a
3c091311111a1a0e180003120d1a0811091a0a

We can use the crib drag method to decrypt the two messages which have been
encrypted using a one time pad twice. To do so,
we must guess words that could appear in either message and XOR the ciphertext
with the hex encoded representation of this guess. We can expedite this process
by using Daniel Crowley's cribdrag script.  To start off, it makes
logical sense to try "guessing" as a word. If we do this, we get the possible
string "verguess" at index 7 of one of the messages. Now, we know that a word
ending in "ver" precedes the words "guess", so we can try possible words.
When we guess "neverguess" we get "unguessing" as a match in the other
message. From here, we can either guess what word ends in "un" or we can
continue guessing words for the first message. Since we know "neverguess" is
two words, we can now try to guess what comes before it. A grammatically
correct way to start this message is with "youll", so let's go ahead and guess
that. Now, we get "havefunguessing" as part of the second message. Great, now
all we have to do is guess the last four characters of each message. Guessing
"this", we get the two messages "youllneverguessthis" and
"havefunguessingthis". We have both messages now, so we can find the original
encryption key by XORing one of these messages with its encrypted counterpart.

>> python xorstrings.py 3c091311111a1a0e180003120d1a0811091a0a 6861766566756e6775657373696e6774686973
54686574776f74696d65706164746f65617379

"54686574776f74696d65706164746f65617379" is our key, so all we have to do is
convert this to text to get "Thetwotimepadtoeasy", but we can try this and it
won't work. Next we can try "thetwotimepadtoeasy", which works!

